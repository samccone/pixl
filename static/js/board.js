// Generated by CoffeeScript 1.6.3
(function() {
  window.Board = (function() {
    function Board(width, height, ctx, pixel, backing, colors) {
      var _this = this;
      this.width = width;
      this.height = height;
      this.ctx = ctx;
      this.pixel = pixel;
      this.colors = colors;
      this.backing = new Uint8ClampedArray(backing);
      this.reDraw();
      socket.on("addPixel", function(_arg) {
        var color, x, y;
        x = _arg.x, y = _arg.y, color = _arg.color;
        return _this.addPixel(x, y, true, color);
      });
      socket.on("removePixel", function(_arg) {
        var color, x, y;
        x = _arg.x, y = _arg.y, color = _arg.color;
        return _this.removePixel(x, y, true, color);
      });
    }

    Board.prototype.reDraw = function() {
      var color, i, x, y, _i, _ref, _results;
      _results = [];
      for (i = _i = 0, _ref = this.backing.length; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
        if (this.backing[i]) {
          x = i % this.width;
          y = Math.floor(i / this.width);
          color = this.colors[x + y * this.width] || "#000";
          _results.push(this.addPixel(i % this.width, Math.floor(i / this.width), true, color));
        } else {
          _results.push(void 0);
        }
      }
      return _results;
    };

    Board.prototype.getPixel = function(x, y) {
      var p;
      return p = x + (y * this.width);
    };

    Board.prototype.removePixel = function(x, y, silent) {
      if (silent == null) {
        silent = false;
      }
      this.ctx.clearRect(x * this.pixel, y * this.pixel, this.pixel, this.pixel);
      this.backing[this.getPixel.apply(this, arguments)] = 0;
      if (!silent) {
        return socket.emit("removePixel", {
          x: x,
          y: y
        });
      }
    };

    Board.prototype.addPixel = function(x, y, silent, color) {
      if (silent == null) {
        silent = false;
      }
      if (color == null) {
        color = "#000";
      }
      this.ctx.fillStyle = color;
      this.ctx.fillRect(x * this.pixel, y * this.pixel, this.pixel, this.pixel);
      this.backing[this.getPixel.apply(this, arguments)] = 1;
      if (!silent) {
        return socket.emit("addPixel", {
          x: x,
          y: y,
          color: color
        });
      }
    };

    Board.prototype.isWithinBounds = function(x, y) {
      if (x < 0 || y < 0) {
        return false;
      }
      if (x * this.pixel + this.pixel > this.width || y * this.pixel + this.pixel > this.height) {
        return false;
      }
      return true;
    };

    Board.prototype.isEmpty = function(x, y) {
      return !this.backing[this.getPixel.apply(this, arguments)];
    };

    Board.prototype.isValid = function(x, y) {
      return this.isWithinBounds.apply(this, arguments) && this.isEmpty.apply(this, arguments);
    };

    return Board;

  })();

}).call(this);
