// Generated by CoffeeScript 1.6.3
(function() {
  var Board, PIXEL, User, canvas, ctx;

  canvas = document.getElementById("app");

  PIXEL = 5;

  ctx = null;

  socket.on("setup", function(_arg) {
    var BOARD, USER, backing, height, width;
    width = _arg.width, height = _arg.height, backing = _arg.backing;
    canvas.width = width;
    canvas.height = height;
    ctx = canvas.getContext("2d");
    BOARD = new Board(canvas.width, canvas.height, backing);
    return USER = new User({
      board: BOARD
    });
  });

  Board = (function() {
    function Board(width, height, backing) {
      var _this = this;
      this.width = width;
      this.height = height;
      this.backing = new Uint8ClampedArray(backing);
      this.reDraw();
      socket.on("addPixel", function(_arg) {
        var x, y;
        x = _arg.x, y = _arg.y;
        return _this.addPixel(x, y, true);
      });
      socket.on("removePixel", function(_arg) {
        var x, y;
        x = _arg.x, y = _arg.y;
        return _this.removePixel(x, y, true);
      });
    }

    Board.prototype.reDraw = function() {
      var i, _i, _ref, _results;
      _results = [];
      for (i = _i = 0, _ref = this.backing.length; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
        if (this.backing[i]) {
          _results.push(this.addPixel(i % this.width, Math.floor(i / this.width)));
        } else {
          _results.push(void 0);
        }
      }
      return _results;
    };

    Board.prototype.getPixel = function(x, y) {
      var p;
      return p = x + (y * this.width);
    };

    Board.prototype.removePixel = function(x, y, silent) {
      if (silent == null) {
        silent = false;
      }
      ctx.clearRect(x * PIXEL, y * PIXEL, PIXEL, PIXEL);
      this.backing[this.getPixel.apply(this, arguments)] = 0;
      if (!silent) {
        return socket.emit("removePixel", {
          x: x,
          y: y
        });
      }
    };

    Board.prototype.addPixel = function(x, y, silent) {
      if (silent == null) {
        silent = false;
      }
      ctx.fillRect(x * PIXEL, y * PIXEL, PIXEL, PIXEL);
      this.backing[this.getPixel.apply(this, arguments)] = 1;
      if (!silent) {
        return socket.emit("addPixel", {
          x: x,
          y: y
        });
      }
    };

    Board.prototype.isWithinBounds = function(x, y) {
      if (x < 0 || y < 0) {
        return false;
      }
      if (x * PIXEL + PIXEL > this.width || y * PIXEL + PIXEL > this.height) {
        return false;
      }
      return true;
    };

    Board.prototype.isEmpty = function(x, y) {
      return !this.backing[this.getPixel.apply(this, arguments)];
    };

    Board.prototype.isValid = function(x, y) {
      return this.isWithinBounds.apply(this, arguments) && this.isEmpty.apply(this, arguments);
    };

    return Board;

  })();

  User = (function() {
    User.prototype.position = [0, 0];

    User.prototype.lastPosition = [0, 0];

    function User(_arg) {
      this.board = _arg.board;
      this.addListeners();
      this.draw.apply(this, this.positions);
    }

    User.prototype.draw = function() {
      var _ref;
      return (_ref = this.board).addPixel.apply(_ref, this.position);
    };

    User.prototype.updatePosition = function(x, y) {
      this.lastPosition = this.position;
      return this.position = [x, y];
    };

    User.prototype.move = function(x, y) {
      var _ref;
      if (!this.board.isValid(x, y)) {
        return;
      }
      this.updatePosition.apply(this, arguments);
      (_ref = this.board).removePixel.apply(_ref, this.lastPosition);
      return this.draw();
    };

    User.prototype.moveUp = function() {
      return this.move(this.position[0], this.position[1] - 1);
    };

    User.prototype.moveDown = function() {
      return this.move(this.position[0], this.position[1] + 1);
    };

    User.prototype.moveLeft = function() {
      return this.move(this.position[0] - 1, this.position[1]);
    };

    User.prototype.moveRight = function() {
      return this.move(this.position[0] + 1, this.position[1]);
    };

    User.prototype.dig = function() {
      if (this.board.isEmpty(this.position[0], this.position[1] + 1)) {
        return;
      }
      this.board.removePixel(this.position[0], this.position[1] + 1);
      return this.fall();
    };

    User.prototype.drop = function() {
      this.board.addPixel(this.position[0], this.position[1]);
      this.updatePosition(this.position[0], this.position[1] - 1);
      return this.draw();
    };

    User.prototype.fall = function() {
      var _results;
      _results = [];
      while (this.board.isValid(this.position[0], this.position[1] + 1)) {
        _results.push(this.moveDown());
      }
      return _results;
    };

    User.prototype.addListeners = function() {
      var _this = this;
      return window.addEventListener("keydown", function(e) {
        switch (e.keyCode) {
          case 39:
            return _this.moveRight();
          case 37:
            return _this.moveLeft();
          case 38:
            return _this.moveUp();
          case 40:
            return _this.moveDown();
          case 90:
            return _this.dig();
          case 88:
            return _this.drop();
        }
      });
    };

    return User;

  })();

}).call(this);
